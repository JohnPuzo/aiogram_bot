from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import middleware
from datafile import *
from keyboard import *
from llm_integration import llm_invoke, preset_history

router = Router()


class Form(StatesGroup):
    wait_custom_habit = State()
    friend_username = State()
    friend_username_del = State()
    llm_dialog = State()


default_habits = {
    "smoking": "–ö—É—Ä–µ–Ω–∏–µ",
    "alcohol": "–ê–ª–∫–æ–≥–æ–ª—å",
    "fastfood": "–§–∞—Å—Ç—Ñ—É–¥",
}

styles = {
    "formal": "–§–æ—Ä–º–∞–ª—å–Ω–æ üé©",
    "informal": "–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ ü§™",
}


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await add_user(message.from_user.id, message.from_user.username)
    await state.update_data(habit_selection_chain="True")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –∏–∑–±–∞–≤–∏—Ç—å—Å—è.", reply_markup=habit_keyboard)


@router.callback_query(lambda c: c.data.startswith("habit_"))
async def habit_selected(callback: types.CallbackQuery, state: FSMContext):
    habit = callback.data.split("_")[1]

    data = await state.get_data()
    try:
        flag = data["habit_selection_chain"]
    except KeyError:
        flag = "True"

    if habit == "custom":
        await callback.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É:")
        await state.set_state(Form.wait_custom_habit)
    else:
        await set_habit(callback.from_user.id, default_habits[habit])
        await callback.message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª: {default_habits[habit]}.")
        if flag == "True":
            await callback.message.answer(
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã: –≤ —à—É—Ç–ª–∏–≤–æ–π –∏–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ–π —Ñ–æ—Ä–º–µ!",
                reply_markup=type_keyboard,
            )


@router.message(Form.wait_custom_habit)
async def process_custom_habit(message: types.Message, state: FSMContext):
    habit = message.text.strip()

    data = await state.get_data()
    try:
        flag = data["habit_selection_chain"]
    except KeyError:
        flag = "True"

    if await validate_habit_input(habit):
        await set_habit(message.from_user.id, habit)
        await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª: {habit}.")
        if flag == "True":
            await message.answer(
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã: –≤ —à—É—Ç–ª–∏–≤–æ–π –∏–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ–π —Ñ–æ—Ä–º–µ!",
                reply_markup=type_keyboard,
            )
        await state.clear()
    else:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã. –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ")


@router.callback_query(F.data.startswith("type_"))
@middleware.checking_habit
async def style_selection(callback: types.CallbackQuery, state: FSMContext):
    style_str = callback.data.split("_")[1]
    style = True if style_str == "formal" else False
    await set_style(callback.from_user.id, style)

    await callback.message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª: {styles[style_str]}. –ù–∞—á–Ω–µ–º –±–æ—Ä—å–±—É! üí™", reply_markup=main_menu)

    await state.clear()


@router.message(Command("progress"))
@router.message(F.text == "–ü—Ä–æ–≥—Ä–µ—Å—Å")
@middleware.checking_habit
@middleware.checking_style
async def show_progress_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:", reply_markup=progress_menu)


@router.message(Command("gigachat"))
@router.message(F.text == "GigaChat")
@middleware.checking_habit
@middleware.checking_style
async def show_gigachat_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:", reply_markup=gigachat_menu)


@router.message(Command("friends"))
@router.message(F.text == "–ú–µ–Ω—é –¥—Ä—É–∑–µ–π")
@middleware.checking_habit
@middleware.checking_style
async def show_gigachat_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:", reply_markup=friends_menu)


@router.message(Command("settings"))
@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@middleware.checking_habit
@middleware.checking_style
async def show_gigachat_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:", reply_markup=change_menu)


@router.message(Command("menu"))
@router.message(F.text == "–ù–∞–∑–∞–¥")
@middleware.checking_habit
@middleware.checking_style
async def show_main_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:", reply_markup=main_menu)


@router.message(Command("my_progress"))
@router.message(F.text == "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
@middleware.checking_habit
@middleware.checking_style
async def show_progress(message: types.Message):
    user_id = message.from_user.id
    day = await get_user_progress(user_id)
    await message.answer(f"–¢—ã –Ω–µ –ø–æ–¥–¥–∞–≤–∞–ª—Å—è –ø—Ä–∏–≤—ã—á–∫–µ {day} –¥–Ω–µ–π! üéâ")


@router.message(Command("stop_progress"))
@router.message(F.text == "–Ø —Å–æ—Ä–≤–∞–ª—Å—è")
@middleware.checking_habit
@middleware.checking_style
async def stop_progress(message: types.Message):
    user_id = message.from_user.id
    await set_start_date(user_id)
    await message.answer("–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ —Å–ª—É—á–∞–µ—Ç—Å—è! –¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. üòÖ")


@router.message(Command("task"))
@router.message(F.text == "–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è")
@middleware.checking_habit
@middleware.checking_style
async def daily_task(message: types.Message, state: FSMContext):
    await preset_history(state=state, user_id=message.from_user.id, mode="task")
    result = await llm_invoke(message=message, state=state, only_one_answer=True)
    await message.answer(result)


@router.message(Command("change_habit"))
@router.message(F.text == "–í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
@middleware.checking_habit
@middleware.checking_style
async def change_habit(message: types.Message, state: FSMContext):
    await state.update_data(habit_selection_chain="False")
    await message.answer("–î–∞–≤–∞–π —Å–º–µ–Ω–∏–º –ø—Ä–∏–≤—ã—á–∫—É.", reply_markup=habit_keyboard)


@router.message(Command("change_style"))
@router.message(F.text == "–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø")
@middleware.checking_habit
@middleware.checking_style
async def change_style(message: types.Message):
    await message.answer("–î–∞–≤–∞–π —Å–º–µ–Ω–∏–º —Ç–∏–ø!", reply_markup=type_keyboard)


@router.message(Command("add_friend"))
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞")
@middleware.checking_habit
@middleware.checking_style
async def cmd_add_friend(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ username –¥—Ä—É–≥–∞ (–æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ @):")
    await state.set_state(Form.friend_username)


@router.message(Form.friend_username)
async def input_username_to_add(message: types.Message, state: FSMContext):
    username = message.text.strip().replace("@", "")

    if username == message.from_user.username:
        await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è üôÉ\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞!")
        return
    elif len(username) < 5 or len(username) > 32 or not all([i.isalnum() or i == "_" for i in username]):
        await message.answer("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –Ω–∏–∂–Ω–µ–≥–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è \'_\'")
        return
    if not await check_user_exists(username):
        await message.answer(f"–í–∞—à –¥—Ä—É–≥ —Å –Ω–∏–∫–æ–º @{username} –µ—â—ë –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º, –ª–∏–±–æ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –Ω–∏–∫–µ.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑.")
        return

    user_id = message.from_user.id
    if await check_friend_exists(user_id, username):
        await message.answer(f"–î—Ä—É–≥ —Å –Ω–∏–∫–æ–º @{username} —É–∂–µ –±—ã–ª –≤ –¥—Ä—É–∑—å—è—Ö.")
        await state.clear()
        return

    await add_friend(user_id, username)
    await message.answer("–î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω")
    await state.clear()


@router.message(Command("delete_friend"))
@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞")
@middleware.checking_habit
@middleware.checking_style
async def cmd_delete_friend(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ username –¥—Ä—É–≥–∞ (–æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ @):")
    await state.set_state(Form.friend_username_del)


@router.message(Form.friend_username_del)
async def input_username_to_del(message: types.Message, state: FSMContext):
    username = message.text.strip().replace("@", "")

    if username == message.from_user.username:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞, –∞ –Ω–µ —Å–≤–æ—ë! üôÉ")
        return
    elif len(username) < 5 or len(username) > 32 or not all([i.isalnum() or i == "_" for i in username]):
        await message.answer(
            "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –Ω–∏–∂–Ω–µ–≥–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è \'_\'")
        return

    user_id = message.from_user.id
    if not await check_friend_exists(user_id, username):
        await message.answer(f"–ß–µ–ª–æ–≤–µ–∫–∞ —Å –Ω–∏–∫–æ–º @{username} –Ω–µ –±—ã–ª–æ –≤ –≤–∞—à–∏—Ö –¥—Ä—É–∑—å—è—Ö.")
        await state.clear()
        return

    await delete_friend(user_id, username)
    await message.answer("–î—Ä—É–≥ —É–¥–∞–ª—ë–Ω")
    await state.clear()


@router.message(F.text == "–ù–∞–ø–∏—Å–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")
@middleware.checking_habit
@middleware.checking_style
async def contact_specialist(message: types.Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.", reply_markup=specialist_menu)
    await preset_history(state=state, user_id=message.from_user.id, mode="global")
    await state.set_state(Form.llm_dialog)


@router.message(Form.llm_dialog and F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    await state.clear()


@router.message(Form.llm_dialog)
async def llm_chat(message: types.Message, state: FSMContext):
    result = await llm_invoke(message=message, state=state, only_one_answer=False)
    await message.answer(result)


@router.message()
@middleware.checking_habit
@middleware.checking_style
async def unknown_command(message: types.Message):
    await message.answer("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=main_menu)


async def get_friends_progress(user_id):
    friends_ids = await get_friends_id_list(user_id)
    if not friends_ids:
        return []

    friends_progress = []
    for friend in friends_ids:
        friends_progress.append({
            "username": await get_username(friend),
            "habit": await get_habit(friend),
            "days": await get_user_progress(friend)
        })

    return friends_progress


async def daily_progress(bot):
    for user_id in await get_all_users():
        progress = await get_user_progress(user_id)
        friend_progress = await get_friends_progress(user_id)

        message = f"üåû –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress} –¥–Ω–µ–π –±–µ–∑ –ø—Ä–∏–≤—ã—á–∫–∏! üöÄ"
        if len(friend_progress) > 0:
            message += "\nüë¨ **–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π:**\n"
            for friend in friend_progress:
                message += f"üîπ {friend['username']}: {friend['days']} –¥–Ω–µ–π (–±–æ—Ä–µ—Ç—Å—è —Å {friend['habit']})\n"
        await bot.send_message(user_id, message)
