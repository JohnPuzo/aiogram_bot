from tkinter.tix import Form
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datafile import add_user, set_habit, set_type, validate_habit_input
from keyboard import main_menu, habit_keyboard, specialist_menu, type_keyboard
import pandas as pd
import json

DB_FILE = "users.csv"
router = Router()


class Form(StatesGroup):
    waiting_for_custom_habit = State()
    waiting_for_username = State()
    waiting_for_username_delete = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    add_user(message.from_user.id, message.from_user.username)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –∏–∑–±–∞–≤–∏—Ç—å—Å—è.", reply_markup=habit_keyboard)



@router.callback_query(lambda c: c.data.startswith("habit_"))
async def habit_selected(callback: types.CallbackQuery, state: FSMContext):
    habit = callback.data.split("_")[1]
    if habit == "custom":
        await callback.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É:")
        await state.set_state(Form.waiting_for_custom_habit)
    else:
        set_habit(callback.from_user.id, habit)
        await callback.message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª: {habit}.", reply_markup=main_menu)
        await callback.message.answer(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã: –≤ —à—É—Ç–ª–∏–≤–æ–π –∏–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ–π —Ñ–æ—Ä–º–µ!",
            reply_markup=type_keyboard,
        )


@router.message(Form.waiting_for_custom_habit)
async def process_custom_habit(message: types.Message, state: FSMContext):
    habit = message.text
    if validate_habit_input(habit):
        set_habit(message.from_user.id, habit)
        await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª: {habit}.", reply_markup=main_menu)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã: –≤ —à—É—Ç–ª–∏–≤–æ–π –∏–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ–π —Ñ–æ—Ä–º–µ!",
            reply_markup=type_keyboard,
        )
        await state.clear()
    else:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã. " +
            "–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ")


@router.callback_query(lambda c: c.data.startswith("type_"))
async def type_selected(callback: types.CallbackQuery):
    type = callback.data.split("_")[1]
    set_type(callback.from_user.id, type)
    await callback.message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª: {type}. –ù–∞—á–Ω–µ–º –±–æ—Ä—å–±—É! üí™", reply_markup=main_menu)


@router.message(lambda msg: msg.text == "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: types.Message):
    user_id = message.from_user.id
    df = pd.read_csv(DB_FILE)
    day = df[df["user_id"] == user_id].iloc[0]["days"]
    await message.answer(f"–¢—ã –Ω–µ –ø–æ–¥–¥–∞–≤–∞–ª—Å—è –ø—Ä–∏–≤—ã—á–∫–µ {day} –¥–Ω–µ–π! üéâ")


@router.message(lambda msg: msg.text == "–Ø —Å–æ—Ä–≤–∞–ª—Å—è")
async def show_progress(message: types.Message):
    await message.answer("–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ —Å–ª—É—á–∞–µ—Ç—Å—è! –¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. üòÖ")
    user_id = message.from_user.id
    df = pd.read_csv(DB_FILE)
    df.loc[df["user_id"] == user_id, "days"] = 0
    df.to_csv(DB_FILE, index=False)


#–∑–¥–µ—Å—å –Ω–∞–¥–æ —Å–æ–æ—Ç–≤ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–µ
@router.message(lambda msg: msg.text == "–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è")
async def daily_task(message: types.Message):
    await message.answer(f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞: —Ç—ã –ª–æ—Ö")


@router.message(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def change_habit(message: types.Message):
    await message.answer("–î–∞–≤–∞–π —Å–º–µ–Ω–∏–º –ø—Ä–∏–≤—ã—á–∫—É.", reply_markup=habit_keyboard)


@router.message(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø")
async def change_type(message: types.Message):
    await message.answer("–î–∞–≤–∞–π —Å–º–µ–Ω–∏–º —Ç–∏–ø!", reply_markup=type_keyboard)


@router.message(lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞")
async def add_friend(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—á–∏–Ω–∞—è —Å @:")
    await state.set_state(Form.waiting_for_username)


@router.message(Form.waiting_for_username)
async def input_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    if not username.startswith('@'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ username, –Ω–∞—á–∏–Ω–∞—è —Å @ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).")
        return
    df = pd.read_csv(DB_FILE)
    username = username[1:]
    if username not in df["username"].values:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username {username}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ username –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return
    user_id = message.from_user.id
    user_row = df[df["user_id"] == user_id]
    friend_id = df[df["username"] == username].iloc[0]["user_id"]
    try:
        friends_list = json.loads(user_row.iloc[0]["friends"])
    except:
        friends_list = []
    if friend_id not in friends_list:
        friends_list.append(friend_id)
    else:
        await message.answer("–î—Ä—É–≥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        return
    friends_list = [int(friend) for friend in friends_list]
    df.loc[df["user_id"] == user_id, "friends"] = json.dumps(friends_list)
    df.to_csv(DB_FILE, index=False)
    await message.answer("–î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω")
    await state.clear()


@router.message(lambda msg: msg.text == "–£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞")
async def add_friend(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—á–∏–Ω–∞—è —Å @:")
    await state.set_state(Form.waiting_for_username_delete)


@router.message(Form.waiting_for_username_delete)
async def input_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    if not username.startswith('@'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ username, –Ω–∞—á–∏–Ω–∞—è —Å @ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).")
        return
    df = pd.read_csv(DB_FILE)
    username = username[1:]
    if username not in df["username"].values:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username {username}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ username –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return
    user_id = message.from_user.id
    user_row = df[df["user_id"] == user_id]
    friend_id = df[df["username"] == username].iloc[0]["user_id"]
    try:
        friends_list = json.loads(user_row.iloc[0]["friends"])
    except:
        friends_list = []
    if friend_id not in friends_list:
        await message.answer("–î—Ä—É–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω")
        return
    else:
        friends_list.remove(friend_id)
    friends_list = [int(friend) for friend in friends_list]
    df.loc[df["user_id"] == user_id, "friends"] = json.dumps(friends_list)
    df.to_csv(DB_FILE, index=False)
    await message.answer("–î—Ä—É–≥ —É–¥–∞–ª–µ–Ω")
    await state.clear()


# –∑–¥–µ—Å—å —Å–æ–æ—Ç–≤ —Å–≤—è–∑—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
@router.message(lambda msg: msg.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º")
async def contact_specialist(message: types.Message):
    await message.answer("–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.", reply_markup=specialist_menu)


@router.message(lambda msg: msg.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)


def register_handlers(dp):
    dp.include_router(router)


@router.message()
async def unknown_command(message: types.Message):
    await message.answer("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.")
